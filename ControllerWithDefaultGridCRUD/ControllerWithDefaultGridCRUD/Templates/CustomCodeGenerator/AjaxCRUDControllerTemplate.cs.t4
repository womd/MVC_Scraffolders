<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="NameSpace" type="System.String" #>
<#@ parameter name="ControllerName" type="System.String" #>
<#@ parameter name="ViewModel" type="System.String" #>
<#@ parameter name="GridName" type="System.String" #>

/// This code was generated by ControllerWithDefaultGridCRUD Scaffolder.
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using PLSA.DAL;
using PLSA.ViewModel;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.Mvc.Html;
using PLSA.Utils;

namespace <#= NameSpace #>
{
    public class <#= ControllerName #>Controller
    {
		
		public JsonResult <#= GridName #>_read ([DataSourceRequest] DataSourceRequest request)
		{
			List<<#= ViewModel #>>data = new List<<#= ViewModel #>>();
			
			/// code to fill the list ....

			 return Json(data.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
		}

		public JsonResult <#= GridName #>_create([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<<#= ViewModel #>> rows)
        {
            if (ModelState.IsValid)
            {
				foreach (var row in rows)
                {
				/// code to create the item ....
				}
			}
			return Json(rows.ToDataSourceResult(request,ModelState), JsonRequestBehavior.AllowGet);
		}

		public JsonResult <#= GridName #>_update([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<<#= ViewModel #>> rows)
        {
            if (ModelState.IsValid)
            {
				foreach (var row in rows)
                {
				/// code to update the item
				}
			}
			return Json(rows.ToDataSourceResult(request,ModelState), JsonRequestBehavior.AllowGet);
		}

		public JsonResult <#= GridName #>_destroy([DataSourceRequest] DataSourceRequest request, [Bind(Prefix = "models")] IEnumerable<<#= ViewModel #>> rows)
        {
            foreach (var row in rows)
            {
			/// code to destroy the item
			}
			return Json(rows);
		}
    }
}